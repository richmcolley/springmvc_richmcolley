excel-to-json/
├── src/
│   └── main/
│       └── java/
│           └── com/
│               └── example/
│                   ├── controller/
│                   │   └── ExcelToJsonController.java
│                   ├── model/
│                   │   ├── Asset.java
│                   │   ├── Transaction.java
│                   │   └── Pset.java
│                   ├── service/
│                   │   └── ExcelToJsonService.java
│                   └── ExcelToJsonApplication.java
└── pom.xml



import com.fasterxml.jackson.annotation.JsonProperty;

public class Asset {
    @JsonProperty("isin")
    private String isin;

    @JsonProperty("sed")
    private String sed;

    @JsonProperty("unit")
    private String unit;

    @JsonProperty("cR")
    private String cR;

    // Constructors, getters, and setters (omitted for brevity)
}





import com.fasterxml.jackson.annotation.JsonProperty;

public class Pset {
    @JsonProperty("crest")
    private Crest crest;

    @JsonProperty("tradeDate")
    private String tradeDate;

    @JsonProperty("sDate")
    private String sDate;

    // Constructors, getters, and setters (omitted for brevity)

    public static class Crest {
        @JsonProperty("acquiring")
        private Acquiring acquiring;

        @JsonProperty("ceding")
        private Ceding ceding;

        // Constructors, getters, and setters (omitted for brevity)

        public static class Acquiring {
            @JsonProperty("id")
            private String id;

            // Constructors, getters, and setters (omitted for brevity)
        }

        public static class Ceding {
            @JsonProperty("id")
            private String id;

            // Constructors, getters, and setters (omitted for brevity)
        }
    }
}





import com.fasterxml.jackson.annotation.JsonProperty;

public class Transaction {
    @JsonProperty("accountId")
    private String accountId;

    @JsonProperty("externalReference")
    private String externalReference;

    @JsonProperty("transactionId")
    private String transactionId;

    @JsonProperty("transactionStatus")
    private String transactionStatus;

    @JsonProperty("transaction_type")
    private String transactionType;

    @JsonProperty("transactionmode")
    private String transactionMode;

    @JsonProperty("channel")
    private String channel;

    @JsonProperty("business")
    private String business;

    @JsonProperty("productType")
    private String productType;

    @JsonProperty("assets")
    private Asset[] assets;

    @JsonProperty("errors")
    private String errors;

    @JsonProperty("accountH")
    private String accountH;

    @JsonProperty("PSET")
    private Pset pset;

    // Constructors, getters, and setters (omitted for brevity)
}




import org.apache.poi.ss.usermodel.*;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;

@Service
public class ExcelToJsonService {

    public void convertExcelToJson(File inputFile, String outputDirectory) throws IOException {
        Workbook workbook = WorkbookFactory.create(inputFile);
        Sheet sheet = workbook.getSheetAt(0); // Assuming the data is in the first sheet

        Iterator<Row> rowIterator = sheet.iterator();
        int rowNumber = 0;

        while (rowIterator.hasNext()) {
            Row row = rowIterator.next();

            if (rowNumber == 0) {
                rowNumber++;
                continue; // Skip header row
            }

            Transaction transaction = mapRowToTransaction(row);

            String jsonFileName = outputDirectory + "/transaction_" + rowNumber + ".json";
            saveTransactionAsJson(transaction, jsonFileName);

            rowNumber++;
        }

        workbook.close();
    }

    private Transaction mapRowToTransaction(Row row) {
        // Your code to map Excel row data to the Transaction object goes here
        // Example:
        Transaction transaction = new Transaction();
        transaction.setAccountId(getStringCellValue(row.getCell(0)));
        transaction.setExternalReference(getStringCellValue(row.getCell(1)));
        // Map other fields

        return transaction;
    }

    private String getStringCellValue(Cell cell) {
        if (cell == null) {
            return "";
        }

        cell.setCellType(CellType.STRING);
        return cell.getStringCellValue();
    }

    private void saveTransactionAsJson(Transaction transaction, String jsonFileName) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        String jsonString = objectMapper.writeValueAsString(transaction);

        try (FileOutputStream fileOutputStream = new FileOutputStream(jsonFileName)) {
            fileOutputStream.write(jsonString.getBytes());
        }
    }
}







import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;

@RestController
public class ExcelToJsonController {

    private final ExcelToJsonService excelToJsonService;

    @Autowired
    public ExcelToJsonController(ExcelToJsonService excelToJsonService) {
        this.excelToJsonService = excelToJsonService;
    }

    @PostMapping("/convert")
    public String convertExcelToJson(@RequestParam("file") MultipartFile file) {
        try {
            File inputFile = File.createTempFile("temp", ".xlsx");
            file.transferTo(inputFile);

            String outputDirectory = "path/to/output/directory"; // Replace with your desired output directory

            excelToJsonService.convertExcelToJson(inputFile, outputDirectory);

            return "Conversion successful. JSON files saved.";
        } catch (IOException e) {
            e.printStackTrace();
            return "Conversion failed. An error occurred.";
        }
    }
}






import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ExcelToJsonApplication {

    public static void main(String[] args) {
        SpringApplication.run(ExcelToJsonApplication.class, args);
    }
}








import org.apache.poi.ss.usermodel.*;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@RestController
public class ExcelController {

    @PostMapping("/convertDates")
    public List<String> convertDates(@RequestBody MultipartFile file) {
        List<String> convertedDates = new ArrayList<>();

        try {
            Workbook workbook = WorkbookFactory.create(file.getInputStream());
            Sheet sheet = workbook.getSheetAt(0); // Assuming you want to process the first sheet

            for (Row row : sheet) {
                Cell dateCell = row.getCell(0); // Assuming the date is in the first column (index 0)

                String dateStr;
                if (dateCell.getCellType() == CellType.NUMERIC && DateUtil.isCellDateFormatted(dateCell)) {
                    // Handle numeric dates (date values)
                    Date dateValue = dateCell.getDateCellValue();
                    dateStr = DateUtils.convertDateToYYYYMMDDFormat(dateValue);
                } else if (dateCell.getCellType() == CellType.STRING) {
                    // Handle string dates (custom date formats or other text)
                    dateStr = convertStringToDate(dateCell.getStringCellValue());
                } else {
                    // Handle other types (blank cells, formulas, etc.)
                    dateStr = ""; // or throw an exception, or handle as appropriate
                }

                convertedDates.add(dateStr);
            }

            workbook.close();
        } catch (IOException e) {
            // Handle the exception
            e.printStackTrace();
        }

        return convertedDates;
    }

    private String convertStringToDate(String dateString) {
        // Custom date format detection based on your Excel data
        SimpleDateFormat[] possibleFormats = {
                new SimpleDateFormat("yyyy/MM/dd"),
                new SimpleDateFormat("dd/MM/yyyy"),
                new SimpleDateFormat("yyyy-MM-dd"),
                // Add more formats as needed, based on what you expect in your Excel file
        };

        for (SimpleDateFormat format : possibleFormats) {
            try {
                Date dateValue = format.parse(dateString);
                return DateUtils.convertDateToYYYYMMDDFormat(dateValue);
            } catch (java.text.ParseException e) {
                // Ignore and try the next format
            }
        }

        // If no valid date format is found, return an empty string or handle the error as appropriate
        return "";
    }
}



// ------------------------------------------------------------------------

Html Upload Excel

<!DOCTYPE html>
<html>
<head>
    <title>Upload and Display Excel Data</title>
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }
    </style>
</head>
<body>
    <h1>Upload and Display Excel Data</h1>
    <form id="uploadForm">
        <input type="file" id="fileInput" accept=".xlsx, .xls" />
        <!-- No need for the Submit button in this case -->
        <button type="submit">Upload</button>
    </form>

    <div id="tableContainer">
        <!-- Table data will be displayed here -->
    </div>

    <script>
        document.getElementById('fileInput').addEventListener('change', function (event) {
            const fileInput = event.target;
            const file = fileInput.files[0];

            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const data = e.target.result;
                    const workbook = XLSX.read(data, { type: 'binary' });

                    const firstSheetName = workbook.SheetNames[0];
                    const worksheet = workbook.Sheets[firstSheetName];

                    const excelData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

                    // Convert the excelData array to an HTML table
                    const tableContainer = document.getElementById('tableContainer');
                    const table = document.createElement('table');
                    tableContainer.innerHTML = '';
                    tableContainer.appendChild(table);

                    excelData.forEach((row, rowIndex) => {
                        const tr = document.createElement('tr');
                        table.appendChild(tr);

                        row.forEach((cellData, cellIndex) => {
                            const cellElement = rowIndex === 0 ? 'th' : 'td';
                            const cell = document.createElement(cellElement);
                            cell.textContent = cellData;
                            tr.appendChild(cell);
                        });
                    });
                };
                reader.readAsBinaryString(file);
            }
        });
    </script>

    <!-- Include the XLSX library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
</body>
</html>
