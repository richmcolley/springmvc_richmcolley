import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
            .antMatchers("/api/**").authenticated() // Protect URLs under "/api/**"
            .anyRequest().permitAll() // Allow all other requests
            .and()
            .formLogin()
            .loginPage("/login") // Custom login page URL
            .permitAll()
            .and()
            .logout()
            .permitAll();
    }

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication() // Use in-memory authentication for simplicity (replace with your own UserDetailsService implementation)
            .withUser("user").password("{noop}password").roles("USER");
    }
}



<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>





@Override
protected void configure(HttpSecurity http) throws Exception {
    // ... (previous configuration)

    http.logout()
        .logoutUrl("/logout") // Customize logout URL
        .logoutSuccessUrl("/login?logout") // Customize logout success URL
        .invalidateHttpSession(true) // Invalidate the session on logout
        .permitAll();
}
