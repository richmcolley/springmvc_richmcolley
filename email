import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.model.*;

import java.util.Arrays;

public class DynamoDBTableCreator {

    private final AmazonDynamoDB dynamoDB;

    public DynamoDBTableCreator(AmazonDynamoDB dynamoDB) {
        this.dynamoDB = dynamoDB;
    }

    public void createTable() {
        CreateTableRequest request = new CreateTableRequest()
            .withTableName("YourTableName")
            .withKeySchema(
                new KeySchemaElement("RequestId", KeyType.HASH),
                new KeySchemaElement("CompositeKey", KeyType.RANGE))
            .withAttributeDefinitions(
                new AttributeDefinition("RequestId", ScalarAttributeType.S),
                new AttributeDefinition("CompositeKey", ScalarAttributeType.S))
            .withProvisionedThroughput(new ProvisionedThroughput(5L, 5L));

        dynamoDB.createTable(request);
    }
}






import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.model.BatchWriteItemResult;
import com.amazonaws.services.dynamodbv2.model.WriteRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class PaymentService {

    private final DynamoDBMapper dynamoDBMapper;

    @Autowired
    public PaymentService(DynamoDBMapper dynamoDBMapper) {
        this.dynamoDBMapper = dynamoDBMapper;
    }

    public void savePayments(List<Payment> payments) {
        List<WriteRequest> writeRequests = new ArrayList<>();
        for (Payment payment : payments) {
            dynamoDBMapper.batchSave(payment);
        }
    }
}




import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class PaymentService {

    private final DynamoDBMapper dynamoDBMapper;

    @Autowired
    public PaymentService(DynamoDBMapper dynamoDBMapper) {
        this.dynamoDBMapper = dynamoDBMapper;
    }

    // For loading a single item by hash key and range key
    public Payment getPayment(String requestId, String compositeKey) {
        return dynamoDBMapper.load(Payment.class, requestId, compositeKey);
    }

    // For querying items by hash key
    public List<Payment> getPaymentsByRequestId(String requestId) {
        Payment paymentKey = new Payment();
        paymentKey.setRequestId(requestId);

        DynamoDBQueryExpression<Payment> queryExpression = new DynamoDBQueryExpression<Payment>()
            .withHashKeyValues(paymentKey);

        return dynamoDBMapper.query(Payment.class, queryExpression);
    }
}
