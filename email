import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.security.cert.X509Certificate;
import java.util.Base64;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import com.fasterxml.jackson.databind.ObjectMapper;

public class ApiService {

    private final HttpClient httpClient;
    private final ObjectMapper objectMapper;
    private final String authHeader;

    public ApiService(String username, String password) throws Exception {
        // Create a TrustManager that trusts all certificates (SSL Bypass)
        TrustManager[] trustAllCerts = new TrustManager[]{
            new X509TrustManager() {
                public X509Certificate[] getAcceptedIssuers() {
                    return null;
                }

                public void checkClientTrusted(X509Certificate[] certs, String authType) {
                }

                public void checkServerTrusted(X509Certificate[] certs, String authType) {
                }
            }
        };

        // Initialize an SSLContext to use the TrustManager
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, trustAllCerts, new java.security.SecureRandom());

        // Create HttpClient with the custom SSLContext
        this.httpClient = HttpClient.newBuilder()
                .sslContext(sslContext)
                .build();

        // ObjectMapper for JSON to Java object mapping
        this.objectMapper = new ObjectMapper();

        // Set up Basic Authentication header
        String auth = username + ":" + password;
        this.authHeader = "Basic " + Base64.getEncoder().encodeToString(auth.getBytes());
    }

    public ApiResponse callApi(String zreference) throws Exception {
        // Build HttpRequest for the given zreference with Basic Auth
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("https://api.example.com/data/" + zreference))
                .GET()
                .header("Accept", "application/json")
                .header("Authorization", authHeader)
                .build();

        // Send the request and get the response
        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

        // Check if the response was successful
        if (response.statusCode() == 200) {
            // Map the response body to ApiResponse class
            return objectMapper.readValue(response.body(), ApiResponse.class);
        } else {
            throw new RuntimeException("API call failed with status code: " + response.statusCode());
        }
    }
}
