package com.example.demo.repository;

import com.example.demo.model.DbResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Repository
public class JdbcRepository {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public List<DbResponse> fetchDataFromDb(String product, String orderType, String transferMode) {
        String sql = "SELECT c.ceding_platform_code, " +
                     "SUM(i.number_of_instructions) AS number_of_instructions, " +
                     "SUM(t.estimated_days * i.number_of_instructions) / SUM(i.number_of_instructions) AS estimated_days " +
                     "FROM ceding_platform c " +
                     "JOIN instructions i ON c.id = i.ceding_platform_id " +
                     "JOIN transactions t ON i.id = t.instruction_id " +
                     "WHERE c.product = ? AND c.order_type = ? AND c.transfer_mode = ? " +
                     "GROUP BY c.ceding_platform_code";

        return jdbcTemplate.query(sql, new Object[]{product, orderType, transferMode}, new RowMapper<DbResponse>() {
            @Override
            public DbResponse mapRow(ResultSet rs, int rowNum) throws SQLException {
                return new DbResponse(
                        rs.getString("ceding_platform_code"),
                        rs.getInt("number_of_instructions"),
                        rs.getDouble("estimated_days")
                );
            }
        });
    }
}












package com.example.demo.service;

import com.example.demo.model.DbResponse;
import com.example.demo.repository.JdbcRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class DbService {

    @Autowired
    private JdbcRepository jdbcRepository;

    public List<DbResponse> fetchDataFromDb(String product, String orderType, String transferMode) {
        return jdbcRepository.fetchDataFromDb(product, orderType, transferMode);
    }
}











package com.example.demo.service;

import com.example.demo.cache.ApplicationCacheManager;
import com.example.demo.constants.Constants;
import com.example.demo.exception.CustomException;
import com.example.demo.model.DbResponse;
import com.example.demo.model.EstimatedDaysRequest;
import com.example.demo.model.EstimatedDaysResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class CacheService {

    @Autowired
    private ApplicationCacheManager cacheManager;

    @Autowired
    private DbService dbService;

    public List<EstimatedDaysResponse> getEstimatedDays(List<EstimatedDaysRequest> requests) {
        if (requests == null || requests.isEmpty()) {
            throw new CustomException("Request list cannot be null or empty.");
        }

        List<EstimatedDaysResponse> responses = new ArrayList<>();

        for (EstimatedDaysRequest request : requests) {
            validateRequest(request);
            String cacheKey = generateCacheKey(request);
            List<DbResponse> cachedData = cacheManager.getCachedData(request.getProduct(), request.getOrderType(), request.getTransferMode());

            if (cachedData == null) {
                cachedData = dbService.fetchDataFromDb(request.getProduct(), request.getOrderType(), request.getTransferMode());
            }

            double estimatedDays = findEstimatedDays(cachedData, request.getCedingPlatformCode());
            responses.add(createResponse(request, estimatedDays));
        }

        return responses;
    }

    private void validateRequest(EstimatedDaysRequest request) {
        if (request.getProduct() == null || request.getOrderType() == null || request.getTransferMode() == null || request.getCedingPlatformCode() == null) {
            throw new CustomException("All fields in the request must be non-null.");
        }
    }

    private String generateCacheKey(EstimatedDaysRequest request) {
        return request.getProduct() + "-" + request.getOrderType() + "-" + request.getTransferMode();
    }

    private double findEstimatedDays(List<DbResponse> cachedData, String cedingPlatformCode) {
        return cachedData.stream()
                .filter(data -> data.getCedingPlatformCode().equals(cedingPlatformCode))
                .map(DbResponse::getEstimatedDays)
                .findFirst()
                .orElseThrow(() -> new CustomException("No data found for the provided cedingPlatformCode."));
    }

    private EstimatedDaysResponse createResponse(EstimatedDaysRequest request, double estimatedDays) {
        return new EstimatedDaysResponse(
                request.getProduct(),
                request.getOrderType(),
                request.getTransferMode(),
                request.getCedingPlatformCode(),
                estimatedDays
        );
    }

    public void initializeCache() {
        for (String product : Constants.PRODUCTS) {
            for (String orderType : Constants.ORDER_TYPES) {
                for (String transferMode : Constants.TRANSFER_MODES) {
                    dbService.fetchDataFromDb(product, orderType, transferMode);
                }
            }
        }
    }
}












package com.example.demo.controller;

import com.example.demo.exception.CustomException;
import com.example.demo.model.EstimatedDaysRequest;
import com.example.demo.model.EstimatedDaysResponse;
import com.example.demo.service.CacheService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class ApiController {

    @Autowired
    private CacheService cacheService;

    @PostMapping("/fetchEstimatedDays")
    public ResponseEntity<?> fetchEstimatedDays(@RequestBody List<EstimatedDaysRequest> requests) {
        try {
            List<EstimatedDaysResponse> responses = cacheService.getEstimatedDays(requests);
            return new ResponseEntity<>(responses, HttpStatus.OK);
        } catch (CustomException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        } catch (Exception e) {
            return new ResponseEntity<>("An unexpected error occurred.", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/initializeCache")
    public ResponseEntity<String> initializeCache() {
        try {
            cacheService.initializeCache();
            return new ResponseEntity<>("Cache initialized with all combinations!", HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>("Failed to initialize cache.", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}









package com.example.demo.cache;

import com.example.demo.model.DbResponse;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.CachePut;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class ApplicationCacheManager {

    /**
     * Retrieves cached data for the given combination of product, orderType, and transferMode.
     * If the data is not found in the cache, it returns null, forcing a DB call.
     *
     * @param product      The product type (e.g., ISA, GIA).
     * @param orderType    The order type (e.g., ReregIn, TransferIN).
     * @param transferMode The transfer mode (e.g., Electronic, Manual).
     * @return A list of DbResponse objects from the cache, or null if not found.
     */
    @Cacheable(value = "estimatedDaysCache", key = "#product + '-' + #orderType + '-' + #transferMode")
    public List<DbResponse> getCachedData(String product, String orderType, String transferMode) {
        // This method will only be executed if the cache does not contain the data.
        // Returning null forces a DB call.
        return null;
    }

    /**
     * Updates the cache with new data for the given combination of product, orderType, and transferMode.
     *
     * @param product      The product type (e.g., ISA, GIA).
     * @param orderType    The order type (e.g., ReregIn, TransferIN).
     * @param transferMode The transfer mode (e.g., Electronic, Manual).
     * @param data         The data to be cached.
     */
    @CachePut(value = "estimatedDaysCache", key = "#product + '-' + #orderType + '-' + #transferMode")
    public List<DbResponse> updateCache(String product, String orderType, String transferMode, List<DbResponse> data) {
        // This method updates the cache with the provided data.
        return data;
    }
}
