import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.jdbc.core.JdbcTemplate;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class ProcessCsvFileTest {

    @Test
    void testProcessCsvFileWithExclusionRuleAndTimeStamp() {
        // Given
        String csvData = "Header1,Header2,Header3\n" +
                         "Value1,Value2,ExcludeMe\n" +  // This record should be excluded
                         "Value4,Value5,Value6";         // This record should remain

        InputStream inputStream = new ByteArrayInputStream(csvData.getBytes(StandardCharsets.UTF_8));

        // Mock PostgresService
        PostgresService postgresService = mock(PostgresService.class);
        Timestamp exclusionTimeStamp = new Timestamp(System.currentTimeMillis());
        ModelClass exclusionModel = new ModelClass("Field1Value", "ExcludeMe", exclusionTimeStamp);
        when(postgresService.fetchDataFromPostgres()).thenReturn(Arrays.asList(exclusionModel));

        // Mock DataService (if needed)
        DataService dataService = mock(DataService.class);

        // Create instance of ProcessCsvFile with mocks
        ProcessCsvFile processCsvFile = new ProcessCsvFile(dataService, postgresService);

        // When
        List<ModelClass> result = processCsvFile.processCsvFile(inputStream, "testFileName.csv");

        // Then
        // We expect only the valid record to be present after exclusion rule is applied
        assertEquals(1, result.size());
        assertEquals("Value6", result.get(0).getField3());
    }
}
