
### Low-Level Design for CSV Processing in AWS Lambda

#### Overview

The system involves an internal portal where Ops users submit a CSV file with three sheets. The file is stored in an S3 bucket, from where an AWS Lambda function picks it up. The Lambda function performs schema validation and exclusion rules, processes valid entries, and generates a report on the results.

#### Components

1. **S3 Bucket**
   - **Purpose**: Store uploaded CSV files.
   - **Events**: Trigger Lambda function upon file upload.

2. **AWS Lambda Function**
   - **Trigger**: S3 file upload event.
   - **Role**: Core processing unit for the CSV file.

#### Detailed Design

1. **Lambda Function Handler**
   - **Input**: S3 event.
   - **Actions**:
     1. Retrieve the file from S3.
     2. Parse the CSV file into three sheets.
     3. Validate the schema of all sheets.
     4. Apply exclusion rules.
     5. Process valid entries.
     6. Generate a report.
     7. Store the report in S3 and/or send notification.

2. **CSV Parsing**
   - **Library**: Use a CSV parsing library (e.g., Apache Commons CSV) to read and parse the CSV file into three sheets.
   - **Data Structure**: Represent sheets as lists of records.

3. **Schema Validation**
   - **Logic**:
     - Define the expected schema for each sheet.
     - Compare the actual schema of the uploaded file against the expected schema.
     - Log errors for schema mismatches.

4. **Exclusion Rules**
   - **Rule 1**: Remove 'Regular-' or 'Start Canc' string from the first sheet.
   - **Rule 2**: Remove records from the third sheet where the amount > 100 (configurable).
   - **Rule 3**: Exclude accounts linked to OPMs who do not accept residuals (configurable list from Ops).
   - **Rule 4**: Exclude records from the second sheet where Payment_Method is null.
   - **Rule 5**: Exclude records where the provider name does not match the name retrieved from zRef (via Product API REST call).
   - **Rule 6**: Exclude records from the second sheet where both Payment_reference and Nino are null.
   - **Rule 7**: Exclude records where zref and provider name are "Fidelity".

5. **Processing Logic**
   - **Logic**:
     - Use TOIS to place transactions on the end system (xyz).
     - If Payment_reference is null, use Nino for transactions.
   - **Integration**: Implement integration with TOIS and ensure transaction placement.

6. **Report Generation**
   - **Data**: Collect data on the status and reason for each record (Success/Failed/Excluded).
   - **Format**: Generate a report in a structured format (e.g., CSV, JSON).
   - **Storage**: Store the report back to S3 and/or send a notification to the Ops team.

7. **Configuration Management**
   - **Parameters**:
     - Threshold amount for exclusion rule 2.
     - List of OPMs who do not accept residuals.
   - **Source**: Use AWS Systems Manager (SSM) Parameter Store or AWS Secrets Manager to manage these configurable parameters.

#### Sequence Diagram

```plaintext
Ops User -> S3: Upload CSV File
S3 -> Lambda: Trigger Lambda Function
Lambda -> S3: Retrieve CSV File
Lambda -> Lambda: Parse CSV File
Lambda -> Lambda: Validate Schema
Lambda -> Lambda: Apply Exclusion Rules
Lambda -> Product API: Retrieve Provider Name
Lambda -> Lambda: Process Valid Entries
Lambda -> TOIS: Place Transactions
Lambda -> Lambda: Generate Report
Lambda -> S3: Store Report
Lambda -> Notification Service: Send Notification (if needed)
```

#### AWS Services and Components

- **S3 Bucket**
  - **Function**: Storage for CSV files and reports.
- **AWS Lambda**
  - **Function**: Core processing logic.
- **Amazon S3 Event Notifications**
  - **Function**: Trigger Lambda function.
- **AWS Systems Manager (SSM) Parameter Store**
  - **Function**: Manage configuration parameters.
- **Notification Service** (e.g., Amazon SNS)
  - **Function**: Notify Ops team upon completion.

This design provides a comprehensive overview of the processing logic, data flow, and necessary components for the Lambda function to handle CSV file validation, processing, and reporting.
