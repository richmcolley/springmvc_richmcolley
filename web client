<dependencies>
    <!-- Spring Boot Starter WebFlux -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-webflux</artifactId>
    </dependency>
    
    <!-- Spring Boot Starter WebClient -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-webclient</artifactId>
    </dependency>
    
    <!-- Reactor Core -->
    <dependency>
        <groupId>io.projectreactor</groupId>
        <artifactId>reactor-core</artifactId>
    </dependency>
    
    <!-- Reactor Netty (optional) -->
    <dependency>
        <groupId>io.projectreactor.netty</groupId>
        <artifactId>reactor-netty</artifactId>
    </dependency>
    
    <!-- Jackson JSON Processor -->
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
    </dependency>
</dependencies>



-------------------------------------------------------

import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.client.WebClient;

public class RestClient {

    public static void main(String[] args) {
        // Create the WebClient instance
        WebClient webClient = WebClient.create();

        // Set the request URL
        String url = "http://rereg-in-integration-service-uat.np3a.paas/reregistration-in/security/settlement";

        // Set the request headers
        HttpHeaders headers = new HttpHeaders();
        headers.set("FIL-CHANNEL", "WEB");
        headers.set("requestId", "12345");
        headers.set("FIL-BUSINESS", "ADVISED");
        headers.set("Authorization", "Basic d2ViYnzc3ashasdjfdso==");
        headers.setContentType(MediaType.APPLICATION_JSON);

        // Set the request body
        String requestBody = "{\"accountId\":\"test123\",\"transactionId\":null,\"assetDetail\":{\"externalReference\":\"1234567890987\",\"assetName\":null,\"assetId\":{\"type\":\"ISIN\",\"value\":\"GB2435etdgfhjhd\"},\"group1Quantity\":{\"value\":3},\"group2Quantity\":{\"value\":0}},\"security\":{\"tradeDate\":\"2023-04-28\",\"settlementDate\":\"2023-04-28\"}}";

        // Send the POST request
        String responseBody = webClient.post()
                .uri(url)
                .headers(httpHeaders -> httpHeaders.addAll(headers))
                .body(BodyInserters.fromValue(requestBody))
                .retrieve()
                .bodyToMono(String.class)
                .block();

        // Handle the response
        if (responseBody != null) {
            System.out.println("Request successful. Response body: " + responseBody);
        } else {
            System.err.println("Request failed. Response body is empty.");
        }
    }
}

--------------------------------------------------------------------

import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.client.WebClient;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

public class RestClient {

    public static void main(String[] args) throws NoSuchAlgorithmException, KeyManagementException {
        // Disable SSL certificate verification
        disableSslVerification();

        // Create the WebClient instance
        WebClient webClient = WebClient.builder()
                .baseUrl("http://rereg-in-integration-service-uat.np3a.paas")  // Update the base URL accordingly
                .build();

        // Set the request URL
        String url = "/reregistration-in/security/settlement";

        // Set the request headers
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("FIL-CHANNEL", "WEB");
        headers.set("requestId", "12345");
        headers.set("FIL-BUSINESS", "ADVISED");
        headers.set("Authorization", "Basic d2ViYnzc3ashasdjfdso==");

        // Set the request body
        String requestBody = "{\"accountId\":\"test123\",\"transactionId\":null,\"assetDetail\":{\"externalReference\":\"1234567890987\",\"assetName\":null,\"assetId\":{\"type\":\"ISIN\",\"value\":\"GB2435etdgfhjhd\"},\"group1Quantity\":{\"value\":3},\"group2Quantity\":{\"value\":0}},\"security\":{\"tradeDate\":\"2023-04-28\",\"settlementDate\":\"2023-04-28\"}}";

        // Send the POST request
        String responseBody = webClient.post()
                .uri(url)
                .headers(httpHeaders -> httpHeaders.addAll(headers))
                .body(BodyInserters.fromValue(requestBody))
                .retrieve()
                .bodyToMono(String.class)
                .block();

        // Handle the response
        if (responseBody != null) {
            System.out.println("Request successful. Response body: " + responseBody);
        } else {
            System.err.println("Request failed. Response body is empty.");
        }
    }

    private static void disableSslVerification() throws NoSuchAlgorithmException, KeyManagementException {
        // Create a trust manager that accepts all certificates
        TrustManager[] trustAllCerts = new TrustManager[]{
                new X509TrustManager() {
                    public X509Certificate[] getAcceptedIssuers() {
                        return null;
                    }

                    public void checkClientTrusted(X509Certificate[] certs, String authType) {
                    }

                    public void checkServerTrusted(X509Certificate[] certs, String authType) {
                    }
                }
        };

        // Create an SSL context with the trust manager
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, trustAllCerts, new SecureRandom());

        // Set the default SSL context to the custom SSL context
        HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());

        // Disable hostname verification
        HostnameVerifier hostnameVerifier = (hostname, session) -> true;
        HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);
    }
}

----------------------------------------------

import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.netty.http.client.HttpClient;

import javax.net.ssl.SSLException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;

public class RestClient {

    public static void main(String[] args) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, CertificateException, SSLException {
        // Create the HttpClient instance
        HttpClient httpClient = HttpClient.create()
                .secure(sslContextSpec -> sslContextSpec.sslContext(getCustomSSLContext()))
                .followRedirect(true);

        // Create the WebClient instance with the custom HttpClient
        WebClient webClient = WebClient.builder()
                .baseUrl("http://rereg-in-integration-service-uat.np3a.paas")  // Update the base URL accordingly
                .clientConnector(new ReactorClientHttpConnector(httpClient))
                .build();

        // Rest of the code remains the same
        // ...
    }

    private static SSLContext getCustomSSLContext() throws NoSuchAlgorithmException, KeyStoreException, CertificateException {
        // Load the custom certificate from file
        InputStream certInputStream = Files.newInputStream(Path.of("/path/to/certificate.crt"));
        X509Certificate certificate = (X509Certificate) CertificateFactory.getInstance("X.509").generateCertificate(certInputStream);
        certInputStream.close();

        // Create a KeyStore and add the certificate to it
        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
        trustStore.load(null, null);
        trustStore.setCertificateEntry("custom_cert", certificate);

        // Create a custom SSL context with the KeyStore
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, trustStore.getCertificateChain("custom_cert"), null);

        return sslContext;
    }
}

